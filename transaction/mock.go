// Code generated by MockGen. DO NOT EDIT.
// Source: gitdev.devops.krungthai.com/open-platform-mini-app/backend/common/transaction (interfaces: IAtomic)
//
// Generated by this command:
//
//	mockgen -destination transaction/mock.go -package=transaction gitdev.devops.krungthai.com/open-platform-mini-app/backend/common/transaction IAtomic
//

// Package transaction is a generated GoMock package.
package transaction

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIAtomic is a mock of IAtomic interface.
type MockIAtomic struct {
	ctrl     *gomock.Controller
	recorder *MockIAtomicMockRecorder
	isgomock struct{}
}

// MockIAtomicMockRecorder is the mock recorder for MockIAtomic.
type MockIAtomicMockRecorder struct {
	mock *MockIAtomic
}

// NewMockIAtomic creates a new mock instance.
func NewMockIAtomic(ctrl *gomock.Controller) *MockIAtomic {
	mock := &MockIAtomic{ctrl: ctrl}
	mock.recorder = &MockIAtomicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAtomic) EXPECT() *MockIAtomicMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockIAtomic) Lock(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockIAtomicMockRecorder) Lock(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockIAtomic)(nil).Lock), ctx, id)
}

// Release mocks base method.
func (m *MockIAtomic) Release(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockIAtomicMockRecorder) Release(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockIAtomic)(nil).Release), ctx, id)
}
